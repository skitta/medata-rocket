//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "document")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub patient: i32,
    pub created_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blood_test::Entity")]
    BloodTest,
    #[sea_orm(has_many = "super::echocardiography::Entity")]
    Echocardiography,
    #[sea_orm(has_many = "super::kawasaki::Entity")]
    Kawasaki,
    #[sea_orm(has_many = "super::liver_function::Entity")]
    LiverFunction,
    #[sea_orm(
        belongs_to = "super::patient::Entity",
        from = "Column::Patient",
        to = "super::patient::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Patient,
    #[sea_orm(has_many = "super::physique::Entity")]
    Physique,
    #[sea_orm(has_many = "super::samples::Entity")]
    Samples,
}

impl Related<super::blood_test::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BloodTest.def()
    }
}

impl Related<super::echocardiography::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Echocardiography.def()
    }
}

impl Related<super::kawasaki::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Kawasaki.def()
    }
}

impl Related<super::liver_function::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LiverFunction.def()
    }
}

impl Related<super::patient::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Patient.def()
    }
}

impl Related<super::physique::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Physique.def()
    }
}

impl Related<super::samples::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Samples.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
