//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use rocket::serde::{ Serialize, Deserialize };

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[serde(crate="rocket::serde")]
#[sea_orm(table_name = "kawasaki_patient")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub registered_id: String,
    pub document_id: String,
    pub in_date: String,
    pub name: String,
    pub gender: String,
    pub age: i32,
    #[sea_orm(column_type = "Double")]
    pub weight: f64,
    #[sea_orm(column_type = "Double")]
    pub height: f64,
    pub relapse: Option<bool>,
    pub resistance: Option<bool>,
    pub group: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::group::Entity",
        from = "Column::Group",
        to = "super::group::Column::Id",
        on_update = "SetNull",
        on_delete = "SetNull"
    )]
    KawasakiGroup,
}

impl Related<super::group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KawasakiGroup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
